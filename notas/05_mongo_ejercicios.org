#+TITLE: Mongo pt. 3 (ejercicios)
#+AUTHOR: Prof. Miguel Angel Escalante Serrato
#+EMAIL:  miguel.escalante@itam.mx
#+DATE: 22-sep-2022
* Ejercicios

Usaremos la BD ~restaurants.json~ para estos ejercicios.

Primero debemos [descargar el archivo ~restaurants.json~ de [[https://github.com/Skalas/nosql2022/raw/main/datasets/restaurants.zip][aquí]].

Luego lo debemos cargar con ~mongoimport~, *recuerden cómo lo hicimos arriba* :

#+begin_src sh
mongoimport --db=reviews --collection=restaurants --file=restaurants.json
#+end_src

La estructura de esta colección de documentos es la siguiente (aunque recuerden que no nos debemos fiar, porque MongoDB no tiene estructura predefinida).

#+begin_src js
{
  "address": {
     "building": "1007",
     "coord": [ -73.856077, 40.848447 ],
     "street": "Morris Park Ave",
     "zipcode": "10462"
  },
  "borough": "Bronx",
  "cuisine": "Bakery",
  "grades": [
     { "date": { "$date": 1393804800000 }, "grade": "A", "score": 2 },
     { "date": { "$date": 1378857600000 }, "grade": "A", "score": 6 },
     { "date": { "$date": 1358985600000 }, "grade": "A", "score": 10 },
     { "date": { "$date": 1322006400000 }, "grade": "A", "score": 9 },
     { "date": { "$date": 1299715200000 }, "grade": "B", "score": 14 }
  ],
  "name": "Morris Park Bake Shop",
  "restaurant_id": "30075445"
}
#+end_src

Vamos a responder las siguientes preguntas:

1. Escribe una función find() para mostrar todos los documentos de la colección de restaurantes.
   #+begin_src js
db.restaurants.find()
   #+end_src

2. Escribe una función find() para mostrar los campos restaurant_id, nombre, municipio y cocina para todos los documentos en el restaurante de la colección.
   #+begin_src js
db.restaurants.find({}, {"restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1})
   #+end_src
3. Escribe una función find() para mostrar los campos restaurant_id, nombre, municipio y cocina, pero excluya el campo \_id para todos los documentos de la colección restaurant.
   #+begin_src js
db.restaurants.find({}, {"_id": 0,"restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1})
   #+end_src

4. Escribe una función find() para mostrar los campos restaurant_id, nombre, municipio y código postal, pero excluya el campo \_id para todos los documentos de la colección restaurant.
   #+begin_src js
db.restaurants.find({}, {
    "_id": 0,
    "restaurant_id": 1,
    "name": 1,
    "borough": 1,
    "address.zipcode": 1
})
   #+end_src
5. Escribe una función find() para mostrar todos los restaurantes que se encuentran en el distrito del Bronx.
   #+begin_src js
db.restaurants.find({"borough": "Bronx"}, {"_id": 0})
   #+end_src
6. Escribe una función find() para mostrar los primeros 5 restaurantes que se encuentran en el condado del Bronx.
   #+begin_src js
db.restaurants.find({"borough": "Bronx"}, {"_id": 0}}).limit(5)
   #+end_src
7. Escribe una función find() para mostrar los siguientes 5 restaurantes después de omitir los primeros 5 que se encuentran en el condado del Bronx.
   #+begin_src js
db.restaurants.find({"borough": "Bronx"}, {"_id": 0}).skip(5).limit(5)
   #+end_src
8. Escribe una función find() para encontrar los restaurantes que obtuvieron una puntuación de más de 90.
   #+begin_src js
db.restaurants.find({"grades.score": {$gt: 90}})
   #+end_src
9. Escribe una función find() para encontrar los restaurantes que obtuvieron una puntuación, más de 80 pero menos de 100.
   #+begin_src js
db.restaurants.find({"grades.score": {$gt: 80, $lt: 100}})
   #+end_src
10. Escribe una función find() para encontrar los restaurantes que se ubican en un valor de latitud menor que -95.754168. Suponiendo que el atributo tipo array ~coord~ tiene la latitud en el índice 0:
   #+begin_src js
db.restaurants.find({"address.coord.0": {$lt: -95.754168}})
   #+end_src
11. Escribe una función find() para encontrar los restaurantes que no preparan ningún tipo de cocina de 'estadounidense' y su puntuación de calificación es superior a 70 y latitud inferior a -65.754168.
   #+begin_src js
db.restaurants.find({"cuisine": {$ne: "American "}, "grades.score": {$gt: 70}, "address.coord.0": {$lt: -65.754168}})
   #+end_src
12. Escribe una función find() para encontrar los restaurantes que no preparan ninguna cocina del continente americano y lograron una puntuación superior a 70 y se ubicaron en la longitud inferior a -65.754168.
   #+begin_src js
db.restaurants.find({"cuisine": {$ne: "American "}, "grades.score": {$gt: 70}, "address.coord.0": {$lt: -65.754168}})
   #+end_src
13. Escribe una función find() para encontrar los restaurantes que no preparan ninguna cocina del continente americano y obtuvieron una calificación de 'A' que no pertenece al distrito de Brooklyn. El documento debe mostrarse según la cocina en orden descendente.
   #+begin_src js
db.restaurants.find({"cuisine": {$ne: "American "}, "grades.grade": "A", "borough": {$ne: "Brooklyn"}}).sort({"cuisine": -1})   
   #+end_src
14. Escribe una función find() para encontrar el ID del restaurante, el nombre, el municipio y la cocina de aquellos restaurantes que contienen 'Wil' como las primeras tres letras de su nombre.
    #+begin_src js
db.restaurants.find({"name": /^Wil/}, {"restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1})
    #+end_src
15. Escribe una función find() para encontrar el ID del restaurante, el nombre, el municipio y la cocina de aquellos restaurantes que contienen "ces" como las últimas tres letras de su nombre.
    #+begin_src js
db.restaurants.find({"name": /ces$/}, {"restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1})
    #+end_src
16. Escribe una función find() para encontrar el ID del restaurante, el nombre, el municipio y la cocina de aquellos restaurantes que contienen 'Reg' como tres letras en algún lugar de su nombre.
    #+begin_src js
db.restaurants.find({"name": /Reg{1}/}, {"restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1})
    #+end_src
17. Escribe una función find() para encontrar los restaurantes que pertenecen al municipio del Bronx y que prepararon platos estadounidenses o chinos.
    #+begin_src js
db.restaurants.find({"borough": "Bronx", "cuisine": /American|Chinese/})
    #+end_src
18. Escribe una función find() para encontrar la identificación del restaurante, el nombre, el municipio y la cocina de los restaurantes que pertenecen al municipio de Staten Island o Queens o Bronxor Brooklyn.
    #+begin_src js
db.restaurants.find({"borough": /Staten Island|Queens|Bronx|Brooklyn/}, {"restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1}})
    #+end_src
19. Escribe una función find() para encontrar el ID del restaurante, el nombre, el municipio y la cocina de aquellos restaurantes que no pertenecen al municipio de Staten Island o Queens o Bronxor Brooklyn.
    #+begin_src js
db.restaurants.find({"borough": {$nin: ["Staten Island", "Queens", "Bronx", "Brooklyn"]}}, {"restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1}}"})
    #+end_src
20. Escribe una función find() para encontrar el ID del restaurante, el nombre, el municipio y la cocina de aquellos restaurantes que obtuvieron una puntuación que no sea superior a 10.
    #+begin_src js
db.restaurants.find({"grades.score": {$not: {$gt: 10}}}, {"restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1})
    #+end_src
21. Escribe una función find() para encontrar el ID del restaurante, el nombre, el municipio y la cocina de aquellos restaurantes que prepararon platos excepto 'Americano' y 'Chinese' o el nombre del restaurante comienza con la letra 'Wil'.
    #+begin_src js
db.restaurants.find({ $or: [ {"cuisine": {$nin: ["American ", "Chinese"]}}, {"name": /^Wil/}]}, {"restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1})
    #+end_src
22. Escribe una función find() para encontrar el ID del restaurante, el nombre y las calificaciones de los restaurantes que obtuvieron una calificación de "A" y obtuvieron una puntuación de 11 en un ISODate "2014-08-11T00: 00: 00Z" entre muchas de las fechas de la encuesta. .
    #+begin_src js
db.restaurants.find({"grades": {$elemMatch: {"grade": "A", "score": 11, "date": ISODate("2014-08-11T00:00:00Z")}}},{"restaurant_id": 1,"name": 1,"grades": 1})
    #+end_src
23. Escribe una función find() para encontrar el ID del restaurante, el nombre y las calificaciones de aquellos restaurantes donde el segundo elemento de la matriz de calificaciones contiene una calificación de "A" y una puntuación de 9 en un ISODate "2014-08-11T00: 00: 00Z".
    #+begin_src js
db.restaurants.find({"grades": {$elemMatch: {"grade": "A", "score": 9, "date": ISODate("2014-08-11T00:00:00Z")}}},{"restaurant_id": 1,"name": 1,"grades": 1})
    #+end_src
24. Escribe una función find() para encontrar el ID del restaurante, el nombre, la dirección y la ubicación geográfica para aquellos restaurantes donde el segundo elemento de la matriz de coordenadas contiene un valor que sea más de 42 y hasta 52.
    #+begin_src js
db.restaurants.find("address.coord.1": {$gt: 42, $lte: 52}}, {"restaurant_id": 1, "name": 1, "address.coord": 1})
    #+end_src
25. Escribe una función find() para organizar el nombre de los restaurantes en orden ascendente junto con todas las columnas.
    #+begin_src js
db.restaurants.find().sort({"name":1})
    #+end_src
26. Escribe una función find() para organizar el nombre de los restaurantes en orden descendente junto con todas las columnas.
    #+begin_src js
db.restaurants.find().sort({"name":-1})
    #+end_src
27. Escribe una función find() para organizar el nombre de la cocina en orden ascendente y para ese mismo distrito de cocina debe estar en orden descendente.
    #+begin_src js
db.restaurants.find().sort({"cuisine":1, "borough":-1})
    #+end_src
28. Escribe una función find() para saber si todas las direcciones contienen la calle o no.
    #+begin_src js
db.restaurants.find({"address.street": {$exists: true}})
    #+end_src
29. Escribe una función find() que seleccionará todos los documentos de la colección de restaurantes donde el valor del campo coord es Double.
    #+begin_src js
db.restaurants.find({"address.coord": {$type: "double"}})
    #+end_src
30. Escribe una función find() que seleccionará el ID del restaurante, el nombre y las calificaciones para esos restaurantes que devuelve 0 como resto después de dividir la puntuación por 7.
    #+begin_src js
db.restaurants.find({"grades": {$elemMatch: {"score": { $mod: [7, 0] }}}},{"_id": 1,"name": 1,"grades": 1})
    #+end_src
31. Escribe una función find() para encontrar el nombre del restaurante, el municipio, la longitud y la actitud y la cocina de aquellos restaurantes que contienen "mon" como tres letras en algún lugar de su nombre.
    #+begin_src js
db.restaurants.find({"name": /mon{1}/}, {"name": 1, "borough": 1, "address.coord": 1, "cuisine": 1})
    #+end_src
32. Escribe una función find() para encontrar el nombre del restaurante, el distrito, la longitud y la latitud y la cocina de aquellos restaurantes que contienen 'Mad' como las primeras tres letras de su nombre.
    #+begin_src js
db.restaurants.find({"name": /^Mad/}, {"name": 1, "borough": 1, "address.coord": 1, "cuisine": 1})
    #+end_src
* PT 2.

Usando la colección de ~tweets~ en la BD ~trainingsessions~ vamos a responder las siguientes preguntas, ayudándonos de las siguientes colecciones adicionales.

   #+begin_src js
  db.primarydialects.insertMany([
      {"lang":"af", "locale":"af-ZA"},
          {"lang":"ar", "locale":"ar"},
          {"lang":"bg", "locale":"bg-BG"},
          {"lang":"ca", "locale":"ca-AD"},
          {"lang":"cs", "locale":"cs-CZ"},
          {"lang":"cy", "locale":"cy-GB"},
          {"lang":"da", "locale":"da-DK"},
          {"lang":"de", "locale":"de-DE"},
          {"lang":"el", "locale":"el-GR"},
          {"lang":"en", "locale":"en-US"},
          {"lang":"es", "locale":"es-ES"},
          {"lang":"et", "locale":"et-EE"},
          {"lang":"eu", "locale":"eu"},
          {"lang":"fa", "locale":"fa-IR"},
          {"lang":"fi", "locale":"fi-FI"},
          {"lang":"fr", "locale":"fr-FR"},
          {"lang":"he", "locale":"he-IL"},
          {"lang":"hi", "locale":"hi-IN"},
          {"lang":"hr", "locale":"hr-HR"},
          {"lang":"hu", "locale":"hu-HU"},
          {"lang":"id", "locale":"id-ID"},
          {"lang":"is", "locale":"is-IS"},
          {"lang":"it", "locale":"it-IT"},
          {"lang":"ja", "locale":"ja-JP"},
          {"lang":"km", "locale":"km-KH"},
          {"lang":"ko", "locale":"ko-KR"},
          {"lang":"la", "locale":"la"},
          {"lang":"lt", "locale":"lt-LT"},
          {"lang":"lv", "locale":"lv-LV"},
          {"lang":"mn", "locale":"mn-MN"},
          {"lang":"nb", "locale":"nb-NO"},
          {"lang":"nl", "locale":"nl-NL"},
          {"lang":"nn", "locale":"nn-NO"},
          {"lang":"pl", "locale":"pl-PL"},
          {"lang":"pt", "locale":"pt-PT"},
          {"lang":"ro", "locale":"ro-RO"},
          {"lang":"ru", "locale":"ru-RU"},
          {"lang":"sk", "locale":"sk-SK"},
          {"lang":"sl", "locale":"sl-SI"},
          {"lang":"sr", "locale":"sr-RS"},
          {"lang":"sv", "locale":"sv-SE"},
          {"lang":"th", "locale":"th-TH"},
          {"lang":"tr", "locale":"tr-TR"},
          {"lang":"uk", "locale":"uk-UA"},
          {"lang":"vi", "locale":"vi-VN"},
          {"lang":"zh", "locale":"zh-CN"}
  ])

  db.languagenames.insertMany([{"locale":"af-ZA", "languages":[
              "Afrikaans",
              "Afrikaans"
  ]},
  {"locale":"ar", "languages":[
              "العربية",
              "Arabic"
  ]},
  {"locale":"bg-BG", "languages":[
              "Български",
              "Bulgarian"
  ]},
  {"locale":"ca-AD", "languages":[
              "Català",
              "Catalan"
  ]},
  {"locale":"cs-CZ", "languages":[
              "Čeština",
              "Czech"
  ]},
  {"locale":"cy-GB", "languages":[
              "Cymraeg",
              "Welsh"
  ]},
  {"locale":"da-DK", "languages":[
              "Dansk",
              "Danish"
  ]},
  {"locale":"de-AT", "languages":[
              "Deutsch (Österreich)",
              "German (Austria)"
  ]},
  {"locale":"de-CH", "languages":[
              "Deutsch (Schweiz)",
              "German (Switzerland)"
  ]},
  {"locale":"de-DE", "languages":[
              "Deutsch (Deutschland)",
              "German (Germany)"
  ]},
  {"locale":"el-GR", "languages":[
              "Ελληνικά",
              "Greek"
  ]},
  {"locale":"en-GB", "languages":[
              "English (UK)",
              "English (UK)"
  ]},
  {"locale":"en-US", "languages":[
              "English (US)",
              "English (US)"
  ]},
  {"locale":"es-CL", "languages":[
              "Español (Chile)",
              "Spanish (Chile)"
  ]},
  {"locale":"es-ES", "languages":[
              "Español (España)",
              "Spanish (Spain)"
  ]},
  {"locale":"es-MX", "languages":[
              "Español (México)",
              "Spanish (Mexico)"
  ]},
  {"locale":"et-EE", "languages":[
              "Eesti keel",
              "Estonian"
  ]},
  {"locale":"eu", "languages":[
              "Euskara",
              "Basque"
  ]},
  {"locale":"fa-IR", "languages":[
              "فارسی",
              "Persian"
  ]},
  {"locale":"fi-FI", "languages":[
              "Suomi",
              "Finnish"
  ]},
  {"locale":"fr-CA", "languages":[
              "Français (Canada)",
              "French (Canada)"
  ]},
  {"locale":"fr-FR", "languages":[
              "Français (France)",
              "French (France)"
  ]},
  {"locale":"he-IL", "languages":[
              "עברית",
              "Hebrew"
  ]},
  {"locale":"hi-IN", "languages":[
              "हिंदी",
              "Hindi"
  ]},
  {"locale":"hr-HR", "languages":[
              "Hrvatski",
              "Croatian"
  ]},
  {"locale":"hu-HU", "languages":[
              "Magyar",
              "Hungarian"
  ]},
  {"locale":"id-ID", "languages":[
              "Bahasa Indonesia",
              "Indonesian"
  ]},
  {"locale":"is-IS", "languages":[
              "Íslenska",
              "Icelandic"
  ]},
  {"locale":"it-IT", "languages":[
              "Italiano",
              "Italian"
  ]},
  {"locale":"ja-JP", "languages":[
              "日本語",
              "Japanese"
  ]},
  {"locale":"km-KH", "languages":[
              "ភាសាខ្មែរ",
              "Khmer"
  ]},
  {"locale":"ko-KR", "languages":[
              "한국어",
              "Korean"
  ]},
  {"locale":"la", "languages":[
              "Latina",
              "Latin"
  ]},
  {"locale":"lt-LT", "languages":[
              "Lietuvių kalba",
              "Lithuanian"
  ]},
  {"locale":"lv-LV", "languages":[
              "Latviešu",
              "Latvian"
  ]},
  {"locale":"mn-MN", "languages":[
              "Монгол",
              "Mongolian"
  ]},
  {"locale":"nb-NO", "languages":[
              "Norsk bokmål",
              "Norwegian (Bokmål)"
  ]},
  {"locale":"nl-NL", "languages":[
              "Nederlands",
              "Dutch"
  ]},
  {"locale":"nn-NO", "languages":[
              "Norsk nynorsk",
              "Norwegian (Nynorsk)"
  ]},
  {"locale":"pl-PL", "languages":[
              "Polski",
              "Polish"
  ]},
  {"locale":"pt-BR", "languages":[
              "Português (Brasil)",
              "Portuguese (Brazil)"
  ]},
  {"locale":"pt-PT", "languages":[
              "Português (Portugal)",
              "Portuguese (Portugal)"
  ]},
  {"locale":"ro-RO", "languages":[
              "Română",
              "Romanian"
  ]},
  {"locale":"ru-RU", "languages":[
              "Русский",
              "Russian"
  ]},
  {"locale":"sk-SK", "languages":[
              "Slovenčina",
              "Slovak"
  ]},
  {"locale":"sl-SI", "languages":[
              "Slovenščina",
              "Slovenian"
  ]},
  {"locale":"sr-RS", "languages":[
              "Српски / Srpski",
              "Serbian"
  ]},
  {"locale":"sv-SE", "languages":[
              "Svenska",
              "Swedish"
  ]},
  {"locale":"th-TH", "languages":[
              "ไทย",
              "Thai"
  ]},
  {"locale":"tr-TR", "languages":[
              "Türkçe",
              "Turkish"
  ]},
  {"locale":"uk-UA", "languages":[
              "Українська",
              "Ukrainian"
  ]},
  {"locale":"vi-VN", "languages":[
              "Tiếng Việt",
              "Vietnamese"
  ]},
  {"locale":"zh-CN", "languages":[
              "中文 (中国大陆)",
              "Chinese (PRC)"
  ]},
  {"locale":"zh-TW", "languages":[
              "中文 (台灣)",
              "Chinese (Taiwan)"
          ]}]);
   #+end_src

1. Qué idiomas base son los que más tuitean con hashtags? Cuál con URLs? Y con @?
   #+begin_src js
    a. db.tweets.aggregate([
    { $match: { "entities.hashtags": { $ne: [] } } },
    { $group: { _id: "$user.lang", count: { $sum: 1 } } },
    { $sort: { count: -1 } }
    ]);

    b. db.tweets.aggregate([
    { $match: { "entities.urls": { $ne: [] } } },
    { $group: { _id: "$user.lang", count: { $sum: 1 } } },
    { $sort: { count: -1 } }
    ]);

    c. db.tweets.aggregate([
    { $match: { "entities.user_mentions": { $ne: [] } } },
    { $group: { _id: "$user.lang", count: { $sum: 1 } } },
    { $sort: { count: -1 } }
    ]);
   #+end_src

2. Qué idioma base es el que más hashtags usa en sus tuits? Planteamiento: "sum del size de los arrays previo filtrado"
   #+begin_src js
db.tweets.aggregate([
    { $match: { "entities.hashtags": { $ne: [] } } },
    { $unwind: "$entities.hashtags" },
    { $group: { _id: "$user.lang", totalHashtags: { $sum: 1 } } }, 
    { $sort: { totalHashtags: -1 } },
    { $limit: 1 }
]);
   #+end_src

3. Cómo podemos saber si los tuiteros hispanohablantes interactúan más en las noches?
   #+begin_src js
db.tweets.aggregate([
    // Filtrar por tweets en español
    { $match: { "user.lang": "es" } },
    
    {
        $addFields: {
            createdDate: {
                $dateFromString: {
                    dateString: {
                        $substr: [ "$created_at", 4, -1 ]  // Ignoramos los primeros 4 caracteres (día de la semana)
                    },
                    format: "%b %d %H:%M:%S %z %Y"
                }
            }
        }
    },
    
    // Extraer la hora de creación del nuevo campo createdDate
    {
        $addFields: {
            hour: { $hour: "$createdDate" }
        }
    },
    
    // Agrupar por hora y contar los tweets
    {
        $group: {
            _id: "$hour",
            count: { $sum: 1 }
        }
    },
    
    // Ordenar por hora
    { $sort: { "_id": 1 } }
]);
   #+end_src

4. Cómo podemos saber de dónde son los tuiteros que más tiempo tienen en la plataforma?
   #+begin_src js
db.tweets.aggregate([
    // Convertir la cadena de texto 'user.created_at' en un objeto Date
    {
        $addFields: {
            userCreatedDate: {
                $dateFromString: {
                    dateString: {
                        $substr: [ "$user.created_at", 4, -1 ]  // Ignoramos los primeros 4 caracteres (día de la semana)
                    },
                    format: "%b %d %H:%M:%S %z %Y"
                }
            }
        }
    },
    
    // Ordenar por fecha de creación del usuario
    {
        $sort: { "userCreatedDate": 1 }
    },
    
    // Agrupar por usuario y obtener su localización
    {
        $group: {
            _id: "$user.id",
            location: { $first: "$user.location" },  // Usamos $first ya que estamos interesados en la primera aparición del usuario (el más antiguo)
            createdAt: { $first: "$userCreatedDate" }
        }
    },
    
    // Ordenar nuevamente por fecha de creación para tener los más antiguos primero
    {
        $sort: { "createdAt": 1 }
    },
    
    // Opcional: Limitar a un número específico de resultados, por ejemplo, los top 10 más antiguos
    {
        $limit: 10
    }
]);
   #+end_src

5. En intervalos de 7:00:00pm a 6:59:59am y de 7:00:00am a 6:59:59pm, de qué paises la mayoría de los tuits?
   #+begin_src js
db.tweets.aggregate([
    // Convertir la cadena 'created_at' a un objeto Date
    {
        $addFields: {
            createdAtDate: {
                $dateFromString: {
                    dateString: {
                        $substr: ["$created_at", 4, -1]
                    },
                    format: "%b %d %H:%M:%S %z %Y"
                }
            }
        }
    },

    // Determinar el intervalo para cada tuit
    {
        $addFields: {
            interval: {
                $cond: [
                    {
                        $or: [
                            { $gte: [{ $hour: "$createdAtDate" }, 19] },
                            { $lt: [{ $hour: "$createdAtDate" }, 7] }
                        ]
                    },
                    "7:00:00pm to 6:59:59am",
                    "7:00:00am to 6:59:59pm"
                ]
            }
        }
    },

    // Agrupar por intervalo y país (o ubicación)
    {
        $group: {
            _id: {
                interval: "$interval",
                country: "$user.location"
            },
            count: { $sum: 1 }
        }
    },

    // Ordenar los resultados por intervalo y conteo de tuits
    {
        $sort: {
            "_id.interval": 1,
            count: -1
        }
    },

    // Opcional: limitar a un número específico de países para cada intervalo, por ejemplo, los top 5
    {
        $group: {
            _id: "$_id.interval",
            countries: {
                $push: {
                    country: "$_id.country",
                    count: "$count"
                }
            }
        }
    },
    {
        $project: {
            topCountries: { $slice: ["$countries", 5] }
        }
    }
]);
   #+end_src

6. De qué país son los tuiteros más famosos de nuestra colección?
   #+begin_src js
db.tweets.aggregate([
    // Ordenar por número de seguidores
    {
        $sort: {
            "user.followers_count": -1
        }
    },

    // Limitar a un subconjunto, por ejemplo, los top 1000 usuarios más famosos
    {
        $limit: 1000
    },

    // Agrupar por país (o ubicación)
    {
        $group: {
            _id: "$user.location",
            famousCount: { $sum: 1 }
        }
    },

    // Ordenar los países por la cantidad de usuarios famosos
    {
        $sort: {
            famousCount: -1
        }
    },

    // Limitar a los top países, por ejemplo, los top 5
    {
        $limit: 5
    }
]);
   #+end_src